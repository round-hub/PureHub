local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()


local Window = Rayfield:CreateWindow({
   Name = "Pure Hub - MM2",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "xeno.onl",
   LoadingSubtitle = "by rhd0/round",
   ShowText = "Rayfield", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Green", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = PureHub  -- Create a custom folder for your hub/game
      FileName = "Pure Hub By rhd0"
   },


   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Pure Keys",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "pure key for puro", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
}) 

local Aimbot = loadstring(game:HttpGet("https://raw.githubusercontent.com/Exunys/Aimbot-V3/main/src/Aimbot.lua"))()
local chams = loadstring(game:HttpGet("https://raw.githubusercontent.com/Stratxgy/Roblox-Chams-Highlight/refs/heads/main/Highlight.lua"))()
local targethud = loadstring(game:HttpGet("https://raw.githubusercontent.com/Stratxgy/Lua-TargetHud/refs/heads/main/targethud.lua"))()
local speed = loadstring(game:HttpGet("https://raw.githubusercontent.com/Stratxgy/Lua-Speed/refs/heads/main/speed.lua"))()

local AimbotTab = Window:CreateTab("Aimbot", "crosshair")

local Section = AimbotTab:CreateSection("Aimbot Settings")


local Toggle = AimbotTab:CreateToggle({
   Name = "Aimbot",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
Aimbot.Load()
   end,
})



local Toggle = AimbotTab:CreateToggle({
   Name = "FOV",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
getgenv().ExunysDeveloperAimbot.FOVSettings.Visible = Value
   end,
})

local Slider = AimbotTab:CreateSlider({
   Name = "FOV",
   Range = {0, 200},
   Increment = 10,
   Suffix = "FOV",
   CurrentValue = 10,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
getgenv().ExunysDeveloperAimbot.FOVSettings.Radius  = Value
   end,
})

local Keybind = Tab:CreateKeybind({
   Name = "Aimbot Keybind",
   CurrentKeybind = "MB2",
   HoldToInteract = true,
   Flag = "Keybind1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Keybind)
getgenv().ExunysDeveloperAimbot.Settings.TriggerKey  = Value
   end,
})

local VisualsTab = Window:CreateTab("Visuals", "crosshair")

local Section = VisualsTab:CreateSection("Chams")


local Toggle = VisualsTab:CreateToggle({
   Name = "Chams",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
 getgenv().chams.enabled = Value
   end,
})


local Slider = VisualsTab:CreateSlider({
   Name = "Slider Example",
   Range = {0, 1},
   Increment = 1,
   Suffix = "Bananas",
   CurrentValue = 0,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
  getgenv().chams.fillTransparency = Value
   end,
})


local Section = VisualsTab:CreateSection("TargetHUD")


local Toggle = VisualsTab:CreateToggle({
   Name = "TargetHUD",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
 getgenv().targethud = Value
   end,
})


getgenv().speed = {
    enabled = false,     
    speed = 16,        
    control = false,
    friction = 2.0,    
    keybind = Enum.KeyCode.KeypadDivide 
}


local PlayerTab = Window:CreateTab("Player", "user-round")

local Section = PlayerTab:CreateSection("Speed")


local Toggle = PlayerTab:CreateToggle({
   Name = "Speed",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
 getgenv().speed.enabled = Value
   end,
})


local Slider = PlayerTab:CreateSlider({
   Name = "Speed Amouht",
   Range = {0, 1000},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 0,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
  getgenv().speed.speed = Value
   end,
})


local Keybind = PlayerTab:CreateKeybind({
   Name = "Speed Keybind",
   CurrentKeybind = "divide",
   HoldToInteract = false,
   Flag = "Keybind1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Keybind)
 getgenv().speed.keybind = Keybind
   end,
})


Rayfield:Notify({
   Title = "Yippee!",
   Content = "Pure Hub has loaded successfully.",
   Duration = 6.5,
   Image = "laugh",
})
